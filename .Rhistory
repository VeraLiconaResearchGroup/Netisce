xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of MAPK Signaling Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("mapk1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("mapk.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
library(NMF)
library(ggplot2)
library(RColorBrewer)
shape=c(rep(16,7))
#shape= c(16,15,17,18,19,8)
#shape=1
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7", "#0072B2", "#D55E00","#F0E442")
sen<-mapk<-read.csv("sensitive-threshold.csv")
res<-mapk<-read.csv("resistant-threshold.csv")
mapk<-read.csv("mapk.csv")
mapk$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=6),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(mapk, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette) +
scale_fill_manual('Expression Ranges',values = c("#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of MAPK Signaling Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("mapk1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("mapk.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
library(NMF)
library(ggplot2)
library(RColorBrewer)
shape=c(rep(16,7))
#shape= c(16,15,17,18,19,8)
#shape=1
cbbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#CC79A7", "#0072B2", "#D55E00","#F0E442")
sen<-mapk<-read.csv("sensitive-threshold.csv")
res<-mapk<-read.csv("resistant-threshold.csv")
mapk<-read.csv("mapk.csv")
mapk$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=6),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(mapk, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette) +
scale_fill_manual('Expression Ranges',values = c("#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of MAPK Signaling Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("mapk1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("mapk.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=4),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(proliferation, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette)+
scale_fill_manual('Expression Ranges',values = c( "#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of Proliferation Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("proliferation1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("proliferation.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=4),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=3),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=3),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(proliferation, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette)+
scale_fill_manual('Expression Ranges',values = c( "#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of Proliferation Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("proliferation1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("proliferation.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=3),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(proliferation, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette)+
scale_fill_manual('Expression Ranges',values = c( "#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of Proliferation Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("proliferation1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("proliferation.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
# Cat2=factor(rep(c("X","Y","Z"),each=3), levels=c('Z', 'Y', 'X')))
sen<-mapk<-read.csv("sensitive-prolif-threshold.csv")
res<-mapk<-read.csv("resistant-prolif-threshold.csv")
proliferation<-read.csv("proliferation.csv")
proliferation$Sample<-factor(rep(c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"),each=3),levels=c("HT29 (untreated)","HT29_BRAFi (resistant)","HT29_BRAFiEGFRi (sensitive)","HT29_BRAFi+SRCi","HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i","HT29_BRAFi+SRCi+MAPK8i"))
ggplot(proliferation, aes(x = Value, y = Gene)) +
geom_rect(data=sen,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax,
ymin=ymin, ymax=ymax,fill="MAPKi sensitive") , alpha=0.1,
colour="NA") +
geom_rect(data=res,aes(x = NULL,y = NULL,xmin=xmin, xmax=xmax, ymin=ymin,
ymax=ymax,fill="MAPKi resistant"),alpha=0.1,colour="NA") +
geom_point(aes(shape = Sample,color = Sample),size=2) +
scale_shape_manual(values=shape) +
scale_color_manual(values = cbbPalette)+
scale_fill_manual('Expression Ranges',values = c( "#56B4E9","#009E73"), guide =
guide_legend(override.aes = list(alpha = 0.1))) +
xlab("Steady-state expression value") + ylab("Internal-marker node")+
ggtitle("Steady-state Expression Values of Proliferation Internal-marker Nodes")+
facet_wrap(~ Gene,scales = "free",ncol =1)+
theme( strip.background = element_blank(), strip.text.x = element_blank()
)
ggsave("proliferation1.pdf",width = 9, height = 4, dpi = 300)
# ggsave("proliferation.png")
# "#F8766D", "#B79F00","#00BA38","#00BFC4","#619CFF","#F564E3"
fvs<-read.delim('crc/results/fvs.txt',sep=" ")
knitr::kable(fvs)
fvs_nomut<-read.delim('crc/results/fvs-no-mutated-genes.txt',sep=" ")
knitr::kable(fvs_nomut)
knitr::include_graphics("crc/results/elbow.png")
knitr::include_graphics("crc/results/silhouette.png")
kmeans<-read.delim('crc/results/kmeans.txt',sep=" ",nrows=3)
knitr::kable(kmeans)
crit1<-read.delim('crc/results/crit1perts.txt',sep=" ",header=F)
print(paste0('number of perturbations that pass filtering criteria 1: ',nrow(crit1)))
knitr::kable(crit1[1:10,])
knitr::include_graphics("crc/results/3-marker-nodes/experimental_internalmarkers.png")
crit2_3<-read.delim('crc/results/3-marker-nodes/successful_controlnode_perturbations.txt',sep=" ",as.is = T)
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_3)))
knitr::kable(crit2_3[1:10,])  %>% column_spec(15, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
library(dplyr)
crit2_3<-read.delim('crc/results/3-marker-nodes/successful_controlnode_perturbations.txt',sep=" ",as.is = T)
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_3)))
knitr::kable(crit2_3[1:10,])  %>% column_spec(15, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
crit2_3<-read.delim('crc/results/3-marker-nodes/successful_controlnode_perturbations.txt',sep=" ",as.is = T)
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_3)))
knitr::kable(crit2_3[1:10,])  %>% column_spec(15, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
library(dplyr)
library(kableExtra)
library(fmsb)
results<-read.delim('ascidian_embryo/results/exp_internalmarkers.txt',sep="\t")
knitr::kable(results) %>%kable_styling(font_size = 8) %>% scroll_box(width = "100%", box_css = "border: 0px;")
DACs<-sweep(as.matrix(results[2:8,2:8]),2,as.matrix(results[1,2:8]))
row.names(DACs)<-results$name[2:8]
DACs<-as.data.frame(DACs) %>%round(3)
where <- rbind(c(1,1), c(2,2), c(3,3))
DACs[1,1]<-cell_spec(DACs[1,1], background = "yellow", format = "html")
DACs[2,2]<-cell_spec(DACs[2,2], background = "yellow", format = "html")
DACs[2,3]<-cell_spec(DACs[2,3], background = "yellow", format = "html")
DACs[4,5]<-cell_spec(DACs[4,5], background = "yellow", format = "html")
DACs[5,4]<-cell_spec(DACs[5,4], background = "yellow", format = "html")
DACs[6,6]<-cell_spec(DACs[6,6], background = "yellow", format = "html")
DACs[7,7]<-cell_spec(DACs[7,7], background = "yellow", format = "html")
knitr::kable(DACs,escape=F) %>% kable_styling(font_size = 9) %>% scroll_box(width = "100%", box_css = "border: 0px;")
create_beautiful_radarchart <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 1,
caxislabels = NULL, title =row.names(data)[4], ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = NULL, plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
title = title,
centerzero = F,
caxislabels = caxislabels
)
}
create_beautiful_radarchart2 <- function(data, color = "#00AFBB",
vlabels = colnames(data), vlcex = 1,
caxislabels = NULL, title =NULL, ...){
radarchart(
data, axistype = 1,
# Customize the polygon
pcol = color, pfcol = NULL, plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = vlcex, vlabels = vlabels,
title = title,
centerzero = F,
caxislabels = caxislabels
)
}
test<-read.delim('ascidian_embryo/results/meta.txt',row.names = 1)
knitr::kable(test) %>%kable_styling(font_size = 8) %>% scroll_box(width = "100%", box_css = "border: 0px;")
maxcol<-apply(test, 2, max)
mincol<-apply(test, 2, min)
d2<-rbind(maxcol,mincol, test)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(1, 0.1, 4, 1))
for (i in 4:nrow(d2)) {
create_beautiful_radarchart2(d2[c(1:3, i), ],color = c("#00AFBB", "#E7B800"),caxislabels = seq(round(min(d2[c(1:3, i),]),1),round(max(d2[c(1:3, i),]),1),.1), vlabels=c("Alp\n(endoderm)","Bco \n(brain)","Celf3.a \n(pan-neural)","Celf3.a\n (pan-neural)","Epi1 \n(epidermis)","Fli.Erg.a \n(mesenchyme)","Myl \n(muscle)",	"Noto1\n (notochord)"));legend(x=0.4, y=1.3, legend =c("unperturbed","perturbed FVS") , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=.8, pt.cex=2)
}
fvs<-read.delim('ipsc/results/fvs.txt',sep=" ")
knitr::kable(fvs)
knitr::include_graphics("ipsc/results/elbow.png")
knitr::include_graphics("ipsc/results/silhouette.png")
kmeans<-read.delim('ipsc/results/kmeans.txt',sep=" ",nrows=6)
knitr::kable(kmeans)
crit1<-read.delim('ipsc/results/crit1perts.txt',sep=" ",header=F)
print(paste0('number of perturbations that pass filtering criteria 1: ',nrow(crit1)))
knitr::kable(crit1[1:10,])
knitr::include_graphics("ipsc/results/original-experimental_internalmarkers.pdf")
crit2_4<-read.delim('ipsc/results/original-successful_controlnode_perturbations.txt',sep=" ",as.is = T)
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_4)))
knitr::kable(crit2_4[1:10,])  %>% column_spec(8, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
library(data.table)
library(ggplot2)
d3<-crit2_4 [,c(1:6)] %>% transpose() %>% as.matrix()
row.names(d3)<-colnames(crit2_4[1:6])
colnames(d3)<-row.names(crit2_4)
d3r<-reshape2::melt(d3) %>% select(-Var2)
#From Paul Tol: https://personal.sron.nl/~pault/
Tol_muted <- c('#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD')
ggplot(d3r, aes(x=value)) +
facet_wrap(~Var1,scales = "free_x",shrink=FALSE) +
geom_bar(aes(y = (..count..)/ncol(d3),fill=value))  + scale_y_continuous(labels=scales::percent) + scale_fill_manual(values=Tol_muted)+ ylab("% of specified perturbation to an FVS control node across all \n combinations of perturbations that passed filtering criteria ") + xlab("node perturbation")
library(fmsb)
attr_pert<-read.delim("ipsc/results/pert1_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_445','pert_365'),c('Oct4',"Sox2","Nanog","EpiTFs")]
exp<-read.delim("ipsc/results/original-exp_internalmarkers.txt",sep=" ",row.names = 1)
EpiSC_avg<-colMeans(exp[4:6,])
ESC_avg<-colMeans(exp[1:3,])
d1<-rbind(EpiSC_avg,ESC_avg,attr_pert)
rownames(d1)[1:4]<- c("EpiSC", "ESC","Nanog overexpression","Klf4 overexpression")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);legend(x=0.4, y=1.4, legend =c("average EpiSC","average ESC",row.names(d2)[i]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
knitr::include_graphics("ipsc/results/expanded-experimental_internalmarkers.pdf")
crit2_7<-read.delim('ipsc/results/expanded-successful_controlnode_perturbations.txt',sep=" ")
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_7)))
knitr::kable(crit2_7)  %>% column_spec(8, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
d4<-crit2_7 [,c(1:6)] %>% transpose() %>% as.matrix()
row.names(d4)<-colnames(crit2_7[1:6])
colnames(d4)<-row.names(crit2_7)
d4r<-reshape2::melt(d4) %>% select(-Var2)
ggplot(d4r, aes(x=value)) +
facet_wrap(~Var1,scales = "free_x",shrink=FALSE) +
geom_bar(aes(y = (..count..)/ncol(d4),fill=value))  + scale_y_continuous(labels=scales::percent) + scale_fill_manual(values=Tol_muted) + ylab("% of specified perturbation to an FVS control node across all \n combinations of perturbations that passed filtering criteria ") + xlab("node perturbation")
library(fmsb)
attr_pert<-read.delim("ipsc/results/pert1_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[row.names(crit2_7),]
exp<-read.delim("ipsc/results/expanded-exp_internalmarkers.txt",sep=" ",row.names = 1)
EpiSC_avg<-colMeans(exp[4:6,])
ESC_avg<-colMeans(exp[1:3,])
d1<-rbind(EpiSC_avg,ESC_avg,attr_pert)
rownames(d1)[1:2]<- c("EpiSC", "ESC")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);legend(x=0.4, y=1.4, legend =c("average EpiSC","average ESC",row.names(d2)[i]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
crit2_3<-read.delim('crc/results/3-marker-nodes/successful_controlnode_perturbations.txt',sep=" ",as.is = T)
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_3)))
knitr::kable(crit2_3[1:10,])  %>% column_spec(15, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
library(data.table)
library(ggplot2)
d3<-crit2_3[,c(1:13)] %>% transpose() %>% as.matrix()
row.names(d3)<-colnames(crit2_3[1:13])
colnames(d3)<-row.names(crit2_3)
d3r<-reshape2::melt(d3) %>% select(-Var2)
#From Paul Tol: https://personal.sron.nl/~pault/
Tol_muted <- c('#88CCEE', '#44AA99', '#117733', '#332288', '#DDCC77', '#999933','#CC6677', '#882255', '#AA4499', '#DDDDDD')
ggplot(d3r, aes(x=value)) +
facet_wrap(~Var1,scales = "free_x",shrink=FALSE) +
geom_bar(aes(y = (..count..)/ncol(d3),fill=value))  + scale_y_continuous(labels=scales::percent) + scale_fill_manual(values=Tol_muted)+ ylab("% of specified perturbation to an FVS control node across all \n combinations of perturbations that passed filtering criteria ") + xlab("node perturbation")
library(fmsb)
attr_pert<-read.delim("crc/results/3-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1) %>% mutate(across(where(is.numeric), ~ round(., digits = 3)))
attr_pert <-attr_pert[c('pert_797158'),]
exp<-read.delim("crc/results/3-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1) %>% mutate(across(where(is.numeric), ~ round(., digits = 3)))
exp<-exp[c(2,3),]
d1<-rbind(exp,attr_pert)
maxcol<-apply(exp, 2, max)
mincol<-apply(exp, 2, min)
d2<-rbind(maxcol,mincol, exp)
rownames(d2)[1:2]<- c("Max", "Min")
create_beautiful_radarchart(d2,color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(min(d2),max(d2),.4),title ="resistant and sensitive attractors");legend(x=0.4, y=1.4, legend =c(row.names(d2)[3:nrow(d2)]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
# library(NMF)
# annot<-c("sensitive","resistant","perturbation")
# aheatmap(t(d1),scale="none",Rowv = NA,color = colorRampPalette(c("navy", "white", "firebrick3"))(80), annCol=annot,cellwidth = 30)
rownames(d1)[3]<- c("HT29_BRAFi+SRCi")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);legend(x=0.4, y=1.4, legend =c(row.names(d2)[3:nrow(d2)]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
crit2_apop<-read.delim('crc/results/apoptosis-marker-nodes/successful_controlnode_perturbations.txt',sep=" ")
crit2_prolif<-read.delim('crc/results/proliferation-marker-nodes/successful_controlnode_perturbations.txt',sep=" ")
crit2_mapk<-read.delim('crc/results/mapk-marker-nodes/successful_controlnode_perturbations.txt',sep=" ")
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(crit2_mapk)))
# knitr::kable(crit2_mapk[1:10,])  %>% column_spec(15, bold = F, border_left = T) %>% scroll_box(width = "100%", box_css = "border: 0px;")
allthree<-crit2_3[c(Reduce(intersect, list(row.names(crit2_3),row.names(crit2_apop),row.names(crit2_prolif),row.names(crit2_mapk)))),]
print(paste0('number of perturbations that pass filtering criteria 2: ',nrow(allthree)))
d4<-allthree[,c(1:13)] %>% transpose() %>% as.matrix()
row.names(d4)<-colnames(allthree[1:13])
colnames(d4)<-row.names(allthree)
d4r<-reshape2::melt(d4) %>% select(-Var2)
ggplot(d4r, aes(x=value)) +
facet_wrap(~Var1,scales = "free_x",shrink=FALSE) +
geom_bar(aes(y = (..count..)/ncol(d4),fill=value))  + scale_y_continuous(labels=scales::percent)+
theme(panel.spacing.x = unit(4, "mm")) + scale_fill_manual(values=Tol_muted) + ylab("% of specified perturbation to an FVS control node across all \n combinations of perturbations that passed filtering criteria ") + xlab("node perturbation")
attr_pert<-read.delim("crc/results/apoptosis-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_797159','pert_790597'),]
exp<-read.delim("crc/results/apoptosis-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1)
exp<-exp[c(2,3),]
rownames(d1)[3:4]<- c("HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i")
attr_pert<-read.delim("crc/results/apoptosis-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_797159','pert_790597'),]
exp<-read.delim("crc/results/apoptosis-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1)
exp<-exp[c(2,3),]
d1<-rbind(exp,attr_pert)
annot<-c("sensitive","resistant","perturbation","perturbation")
rownames(d1)[3:4]<- c("HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);legend(x=0.4, y=1.4, legend =c(row.names(d2)[c(3,4,i)]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
attr_pert<-read.delim("crc/results/apoptosis-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_797159','pert_790597'),]
exp<-read.delim("crc/results/apoptosis-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1)
exp<-exp[c(2,3),]
d1<-rbind(exp,attr_pert)
rownames(d1)[3:4]<- c("HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);legend(x=0.4, y=1.4, legend =c(row.names(d2)[c(3,4,i)]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
attr_pert<-read.delim("crc/results/mapk-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_797159','pert_790597'),]
exp<-read.delim("crc/results/mapk-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1)
exp<-exp[c(2,3),]
d1<-rbind(exp,attr_pert)
annot<-c("sensitive","resistant","perturbation","perturbation")
aheatmap(t(d1),scale="row",Rowv = NA,color = colorRampPalette(c("navy", "white", "firebrick3"))(80), cellwidth = 30,main="proliferation marker nodes")
attr_pert<-read.delim("crc/results/mapk-marker-nodes/pert_internal_markers.txt",sep=" ",row.names = 1)
attr_pert <-attr_pert[c('pert_797159','pert_790597'),]
exp<-read.delim("crc/results/mapk-marker-nodes/exp_internalmarkers.txt",sep=" ",row.names = 1)
exp<-exp[c(2,3),]
d1<-rbind(exp,attr_pert)
rownames(d1)[3:4]<- c("HT29_BRAFi+SRCi+TSCovr","HT29_BRAFi+SRCi+GRB2i")
maxcol<-apply(d1, 2, max)
mincol<-apply(d1, 2, min)
d2<-rbind(maxcol,mincol, d1)
rownames(d2)[1:2]<- c("Max", "Min")
par(mar = c(4, 0.1, 4, 0.1))
for (i in 5:nrow(d2)) {
create_beautiful_radarchart(d2[c(1:4, i), ],color = c("#00AFBB", "#E7B800","#FC4E07"),caxislabels = seq(round(min(d2[c(1:4, i),]),1),round(max(d2[c(1:4, i),]),1),.2),title =row.names(d2)[i]);#legend(x=0.4, y=1.4, legend =c(row.names(d2)[c(3,4,i)]) , bty = "n", pch=20 , col=c("#00AFBB", "#E7B800","#FC4E07") , text.col = "black", cex=1, pt.cex=2)
}
exp<-read.csv('input_data/expressions.csv')
knitr::kable(exp)
samples<-read.delim('input_data/samples.txt')
knitr::kable(samples)
expmarker<-read.delim('results/exp_internalmarkers.txt',sep=" ")
knitr::kable(expmarker)
knitr::include_graphics("images/expmarkers.png")
knitr::include_graphics("results/experimental_internalmarkers.png")
knitr::include_graphics("results/experimental_internalmarkers.png")
knitr::include_graphics("results/experimental_internalmarkers.png")
expmarker<-read.delim('images/exp_internalmarkers.txt',sep=" ")
expmarker<-read.delim('results/experimental_internalmarkers.txt',sep=" ")
expmarker<-read.delim('images/experimental_internalmarkers.txt',sep=" ")
expmarker<-read.delim('images/experimental_internalmarkers.txt',sep=" ")
expmarker<-read.delim('results/exp_internalmarkers.txt',sep=" ")
knitr::kable(expmarker)
knitr::include_graphics("results/experimental_internalmarkers.png")
knitr::include_graphics("images/experimental_internalmarkers.png")
knitr::include_graphics("images/experimental_internalmarkers.png")
knitr::include_graphics("images/experimental_internalmarkers.png")
knitr::include_graphics("results/elbow.png")
knitr::include_graphics("results/experimental_internalmarkers.png")
knitr::include_graphics("results/elbow.png")
knitr::include_graphics("results/silhouette.png")
kmeans<-read.delim('results/kmeans.txt',header = T,sep=" ")
knitr::kable(kmeans[1:6,])
fvs<-read.delim('results/fvs.txt')
knitr::kable(fvs)
crit1<-read.delim('results/crit1perts.txt',header = F)
knitr::kable(crit1)
marker<-read.delim('results/pert1_internal_markers.txt',sep=" ")
marker<-read.delim('results/pert_replicate_1_internal_markers.txt',sep=" ")
knitr::kable(marker)
expmarker<-read.delim('results/exp_internalmarkers.txt',sep=" ")
knitr::kable(expmarker)
fvs<-read.delim('results/fvs.txt')
knitr::kable(fvs)
knitr::include_graphics("results/experimental_internalmarkers.png")
expmarker<-read.delim('results/exp_internalmarkers.txt',sep=" ")
knitr::kable(expmarker)
crit1<-read.delim('results/crit1perts.txt',header = F)
knitr::kable(crit1)
marker<-read.delim('results/pert_replicate_1_internal_markers.txt',sep=" ")
knitr::kable(marker)
crit1<-read.delim('results/crit1perts.txt',header = F)
knitr::kable(crit1)
crit1<-read.delim('results/crit1perts.txt',header = F)
knitr::kable(crit1)
marker<-read.delim('results/pert_replicate_1_internal_markers.txt',sep=" ")
knitr::kable(marker)
success<-read.delim('results/successful_controlnode_perturbations.txt',sep=" ")
knitr::kable(success)
success<-read.delim('results/successful_controlnode_perturbations.txt',sep=" ")
knitr::kable(success)
marker<-marker[marker$name %in% rownames(success),]
allmarkers<-rbind(expmarker,marker)
knitr::kable(allmarkers)
knitr::kable(read.csv('input_data/mutations.csv'))
knitr::kable(read.csv('input_data/mutations.csv'))
knitr::kable(read.delim('results/successful_controlnode_perturbations_mutations.txt',sep=" "))
knitr::kable(read.delim('results/successful_controlnode_perturbations_mutations.txt',sep=" "))
knitr::kable(read.delim('results/markers_mutations.txt',sep=" "))
knitr::kable(read.delim('results/markers_mutations.txt',sep=" "))
knitr::kable(read.delim('results/markers_mutations.txt',sep=" "))
knitr::kable(read.delim('results/marker_mutations.txt',sep=" "))
fvs<-read.delim('results/FVSes.txt')
knitr::kable(fvs)
fvs<-read.delim('results/FVSes.txt',header=F)
knitr::kable(fvs)
fvs<-read.delim('results/fvs.txt')
knitr::kable(fvs)
fvs<-read.delim('results/FVSes.txt',header=F)
knitr::kable(fvs)
fvs<-read.delim('results/FVSes.txt',header=F)
knitr::kable(fvs)
fvs<-read.delim('results/FVSes.txt',header=F)
knitr::kable(fvs)
fvs<-read.delim('results/fvs.txt')
knitr::kable(fvs)
